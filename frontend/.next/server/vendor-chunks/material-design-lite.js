/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/material-design-lite";
exports.ids = ["vendor-chunks/material-design-lite"];
exports.modules = {

/***/ "(ssr)/./node_modules/material-design-lite/src/button/button.js":
/*!****************************************************************!*\
  !*** ./node_modules/material-design-lite/src/button/button.js ***!
  \****************************************************************/
/***/ (() => {

eval("/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ (function() {\n    \"use strict\";\n    /**\n   * Class constructor for Button MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */ var MaterialButton = function MaterialButton(element) {\n        this.element_ = element;\n        // Initialize instance.\n        this.init();\n    };\n    window[\"MaterialButton\"] = MaterialButton;\n    /**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */ MaterialButton.prototype.Constant_ = {\n    };\n    /**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */ MaterialButton.prototype.CssClasses_ = {\n        RIPPLE_EFFECT: \"mdl-js-ripple-effect\",\n        RIPPLE_CONTAINER: \"mdl-button__ripple-container\",\n        RIPPLE: \"mdl-ripple\"\n    };\n    /**\n   * Handle blur of element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */ MaterialButton.prototype.blurHandler_ = function(event) {\n        if (event) {\n            this.element_.blur();\n        }\n    };\n    // Public methods.\n    /**\n   * Disable button.\n   *\n   * @public\n   */ MaterialButton.prototype.disable = function() {\n        this.element_.disabled = true;\n    };\n    MaterialButton.prototype[\"disable\"] = MaterialButton.prototype.disable;\n    /**\n   * Enable button.\n   *\n   * @public\n   */ MaterialButton.prototype.enable = function() {\n        this.element_.disabled = false;\n    };\n    MaterialButton.prototype[\"enable\"] = MaterialButton.prototype.enable;\n    /**\n   * Initialize element.\n   */ MaterialButton.prototype.init = function() {\n        if (this.element_) {\n            if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\n                var rippleContainer = document.createElement(\"span\");\n                rippleContainer.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\n                this.rippleElement_ = document.createElement(\"span\");\n                this.rippleElement_.classList.add(this.CssClasses_.RIPPLE);\n                rippleContainer.appendChild(this.rippleElement_);\n                this.boundRippleBlurHandler = this.blurHandler_.bind(this);\n                this.rippleElement_.addEventListener(\"mouseup\", this.boundRippleBlurHandler);\n                this.element_.appendChild(rippleContainer);\n            }\n            this.boundButtonBlurHandler = this.blurHandler_.bind(this);\n            this.element_.addEventListener(\"mouseup\", this.boundButtonBlurHandler);\n            this.element_.addEventListener(\"mouseleave\", this.boundButtonBlurHandler);\n        }\n    };\n    // The component registers itself. It can assume componentHandler is available\n    // in the global scope.\n    componentHandler.register({\n        constructor: MaterialButton,\n        classAsString: \"MaterialButton\",\n        cssClass: \"mdl-js-button\",\n        widget: true\n    });\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/material-design-lite/src/button/button.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/material-design-lite/src/mdlComponentHandler.js":
/*!**********************************************************************!*\
  !*** ./node_modules/material-design-lite/src/mdlComponentHandler.js ***!
  \**********************************************************************/
/***/ (() => {

eval("/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * A component handler interface using the revealing module design pattern.\n * More details on this design pattern here:\n * https://github.com/jasonmayes/mdl-component-design-pattern\n *\n * @author Jason Mayes.\n */ /* exported componentHandler */ // Pre-defining the componentHandler interface, for closure documentation and\n// static verification.\nvar componentHandler = {\n    /**\n   * Searches existing DOM for elements of our component type and upgrades them\n   * if they have not already been upgraded.\n   *\n   * @param {string=} optJsClass the programatic name of the element class we\n   * need to create a new instance of.\n   * @param {string=} optCssClass the name of the CSS class elements of this\n   * type will have.\n   */ upgradeDom: function(optJsClass, optCssClass) {},\n    /**\n   * Upgrades a specific element rather than all in the DOM.\n   *\n   * @param {!Element} element The element we wish to upgrade.\n   * @param {string=} optJsClass Optional name of the class we want to upgrade\n   * the element to.\n   */ upgradeElement: function(element, optJsClass) {},\n    /**\n   * Upgrades a specific list of elements rather than all in the DOM.\n   *\n   * @param {!Element|!Array<!Element>|!NodeList|!HTMLCollection} elements\n   * The elements we wish to upgrade.\n   */ upgradeElements: function(elements) {},\n    /**\n   * Upgrades all registered components found in the current DOM. This is\n   * automatically called on window load.\n   */ upgradeAllRegistered: function() {},\n    /**\n   * Allows user to be alerted to any upgrades that are performed for a given\n   * component type\n   *\n   * @param {string} jsClass The class name of the MDL component we wish\n   * to hook into for any upgrades performed.\n   * @param {function(!HTMLElement)} callback The function to call upon an\n   * upgrade. This function should expect 1 parameter - the HTMLElement which\n   * got upgraded.\n   */ registerUpgradedCallback: function(jsClass, callback) {},\n    /**\n   * Registers a class for future use and attempts to upgrade existing DOM.\n   *\n   * @param {componentHandler.ComponentConfigPublic} config the registration configuration\n   */ register: function(config) {},\n    /**\n   * Downgrade either a given node, an array of nodes, or a NodeList.\n   *\n   * @param {!Node|!Array<!Node>|!NodeList} nodes\n   */ downgradeElements: function(nodes) {}\n};\ncomponentHandler = function() {\n    \"use strict\";\n    /** @type {!Array<componentHandler.ComponentConfig>} */ var registeredComponents_ = [];\n    /** @type {!Array<componentHandler.Component>} */ var createdComponents_ = [];\n    var componentConfigProperty_ = \"mdlComponentConfigInternal_\";\n    /**\n   * Searches registered components for a class we are interested in using.\n   * Optionally replaces a match with passed object if specified.\n   *\n   * @param {string} name The name of a class we want to use.\n   * @param {componentHandler.ComponentConfig=} optReplace Optional object to replace match with.\n   * @return {!Object|boolean}\n   * @private\n   */ function findRegisteredClass_(name, optReplace) {\n        for(var i = 0; i < registeredComponents_.length; i++){\n            if (registeredComponents_[i].className === name) {\n                if (typeof optReplace !== \"undefined\") {\n                    registeredComponents_[i] = optReplace;\n                }\n                return registeredComponents_[i];\n            }\n        }\n        return false;\n    }\n    /**\n   * Returns an array of the classNames of the upgraded classes on the element.\n   *\n   * @param {!Element} element The element to fetch data from.\n   * @return {!Array<string>}\n   * @private\n   */ function getUpgradedListOfElement_(element) {\n        var dataUpgraded = element.getAttribute(\"data-upgraded\");\n        // Use `['']` as default value to conform the `,name,name...` style.\n        return dataUpgraded === null ? [\n            \"\"\n        ] : dataUpgraded.split(\",\");\n    }\n    /**\n   * Returns true if the given element has already been upgraded for the given\n   * class.\n   *\n   * @param {!Element} element The element we want to check.\n   * @param {string} jsClass The class to check for.\n   * @returns {boolean}\n   * @private\n   */ function isElementUpgraded_(element, jsClass) {\n        var upgradedList = getUpgradedListOfElement_(element);\n        return upgradedList.indexOf(jsClass) !== -1;\n    }\n    /**\n   * Create an event object.\n   *\n   * @param {string} eventType The type name of the event.\n   * @param {boolean} bubbles Whether the event should bubble up the DOM.\n   * @param {boolean} cancelable Whether the event can be canceled.\n   * @returns {!Event}\n   */ function createEvent_(eventType, bubbles, cancelable) {\n        if (\"CustomEvent\" in window && typeof window.CustomEvent === \"function\") {\n            return new CustomEvent(eventType, {\n                bubbles: bubbles,\n                cancelable: cancelable\n            });\n        } else {\n            var ev = document.createEvent(\"Events\");\n            ev.initEvent(eventType, bubbles, cancelable);\n            return ev;\n        }\n    }\n    /**\n   * Searches existing DOM for elements of our component type and upgrades them\n   * if they have not already been upgraded.\n   *\n   * @param {string=} optJsClass the programatic name of the element class we\n   * need to create a new instance of.\n   * @param {string=} optCssClass the name of the CSS class elements of this\n   * type will have.\n   */ function upgradeDomInternal(optJsClass, optCssClass) {\n        if (typeof optJsClass === \"undefined\" && typeof optCssClass === \"undefined\") {\n            for(var i = 0; i < registeredComponents_.length; i++){\n                upgradeDomInternal(registeredComponents_[i].className, registeredComponents_[i].cssClass);\n            }\n        } else {\n            var jsClass = /** @type {string} */ optJsClass;\n            if (typeof optCssClass === \"undefined\") {\n                var registeredClass = findRegisteredClass_(jsClass);\n                if (registeredClass) {\n                    optCssClass = registeredClass.cssClass;\n                }\n            }\n            var elements = document.querySelectorAll(\".\" + optCssClass);\n            for(var n = 0; n < elements.length; n++){\n                upgradeElementInternal(elements[n], jsClass);\n            }\n        }\n    }\n    /**\n   * Upgrades a specific element rather than all in the DOM.\n   *\n   * @param {!Element} element The element we wish to upgrade.\n   * @param {string=} optJsClass Optional name of the class we want to upgrade\n   * the element to.\n   */ function upgradeElementInternal(element, optJsClass) {\n        // Verify argument type.\n        if (!(typeof element === \"object\" && element instanceof Element)) {\n            throw new Error(\"Invalid argument provided to upgrade MDL element.\");\n        }\n        // Allow upgrade to be canceled by canceling emitted event.\n        var upgradingEv = createEvent_(\"mdl-componentupgrading\", true, true);\n        element.dispatchEvent(upgradingEv);\n        if (upgradingEv.defaultPrevented) {\n            return;\n        }\n        var upgradedList = getUpgradedListOfElement_(element);\n        var classesToUpgrade = [];\n        // If jsClass is not provided scan the registered components to find the\n        // ones matching the element's CSS classList.\n        if (!optJsClass) {\n            var classList = element.classList;\n            registeredComponents_.forEach(function(component) {\n                // Match CSS & Not to be upgraded & Not upgraded.\n                if (classList.contains(component.cssClass) && classesToUpgrade.indexOf(component) === -1 && !isElementUpgraded_(element, component.className)) {\n                    classesToUpgrade.push(component);\n                }\n            });\n        } else if (!isElementUpgraded_(element, optJsClass)) {\n            classesToUpgrade.push(findRegisteredClass_(optJsClass));\n        }\n        // Upgrade the element for each classes.\n        for(var i = 0, n = classesToUpgrade.length, registeredClass; i < n; i++){\n            registeredClass = classesToUpgrade[i];\n            if (registeredClass) {\n                // Mark element as upgraded.\n                upgradedList.push(registeredClass.className);\n                element.setAttribute(\"data-upgraded\", upgradedList.join(\",\"));\n                var instance = new registeredClass.classConstructor(element);\n                instance[componentConfigProperty_] = registeredClass;\n                createdComponents_.push(instance);\n                // Call any callbacks the user has registered with this component type.\n                for(var j = 0, m = registeredClass.callbacks.length; j < m; j++){\n                    registeredClass.callbacks[j](element);\n                }\n                if (registeredClass.widget) {\n                    // Assign per element instance for control over API\n                    element[registeredClass.className] = instance;\n                }\n            } else {\n                throw new Error(\"Unable to find a registered component for the given class.\");\n            }\n            var upgradedEv = createEvent_(\"mdl-componentupgraded\", true, false);\n            element.dispatchEvent(upgradedEv);\n        }\n    }\n    /**\n   * Upgrades a specific list of elements rather than all in the DOM.\n   *\n   * @param {!Element|!Array<!Element>|!NodeList|!HTMLCollection} elements\n   * The elements we wish to upgrade.\n   */ function upgradeElementsInternal(elements) {\n        if (!Array.isArray(elements)) {\n            if (elements instanceof Element) {\n                elements = [\n                    elements\n                ];\n            } else {\n                elements = Array.prototype.slice.call(elements);\n            }\n        }\n        for(var i = 0, n = elements.length, element; i < n; i++){\n            element = elements[i];\n            if (element instanceof HTMLElement) {\n                upgradeElementInternal(element);\n                if (element.children.length > 0) {\n                    upgradeElementsInternal(element.children);\n                }\n            }\n        }\n    }\n    /**\n   * Registers a class for future use and attempts to upgrade existing DOM.\n   *\n   * @param {componentHandler.ComponentConfigPublic} config\n   */ function registerInternal(config) {\n        // In order to support both Closure-compiled and uncompiled code accessing\n        // this method, we need to allow for both the dot and array syntax for\n        // property access. You'll therefore see the `foo.bar || foo['bar']`\n        // pattern repeated across this method.\n        var widgetMissing = typeof config.widget === \"undefined\" && typeof config[\"widget\"] === \"undefined\";\n        var widget = true;\n        if (!widgetMissing) {\n            widget = config.widget || config[\"widget\"];\n        }\n        var newConfig = /** @type {componentHandler.ComponentConfig} */ {\n            classConstructor: config.constructor || config[\"constructor\"],\n            className: config.classAsString || config[\"classAsString\"],\n            cssClass: config.cssClass || config[\"cssClass\"],\n            widget: widget,\n            callbacks: []\n        };\n        registeredComponents_.forEach(function(item) {\n            if (item.cssClass === newConfig.cssClass) {\n                throw new Error(\"The provided cssClass has already been registered: \" + item.cssClass);\n            }\n            if (item.className === newConfig.className) {\n                throw new Error(\"The provided className has already been registered\");\n            }\n        });\n        if (config.constructor.prototype.hasOwnProperty(componentConfigProperty_)) {\n            throw new Error(\"MDL component classes must not have \" + componentConfigProperty_ + \" defined as a property.\");\n        }\n        var found = findRegisteredClass_(config.classAsString, newConfig);\n        if (!found) {\n            registeredComponents_.push(newConfig);\n        }\n    }\n    /**\n   * Allows user to be alerted to any upgrades that are performed for a given\n   * component type\n   *\n   * @param {string} jsClass The class name of the MDL component we wish\n   * to hook into for any upgrades performed.\n   * @param {function(!HTMLElement)} callback The function to call upon an\n   * upgrade. This function should expect 1 parameter - the HTMLElement which\n   * got upgraded.\n   */ function registerUpgradedCallbackInternal(jsClass, callback) {\n        var regClass = findRegisteredClass_(jsClass);\n        if (regClass) {\n            regClass.callbacks.push(callback);\n        }\n    }\n    /**\n   * Upgrades all registered components found in the current DOM. This is\n   * automatically called on window load.\n   */ function upgradeAllRegisteredInternal() {\n        for(var n = 0; n < registeredComponents_.length; n++){\n            upgradeDomInternal(registeredComponents_[n].className);\n        }\n    }\n    /**\n   * Check the component for the downgrade method.\n   * Execute if found.\n   * Remove component from createdComponents list.\n   *\n   * @param {?componentHandler.Component} component\n   */ function deconstructComponentInternal(component) {\n        if (component) {\n            var componentIndex = createdComponents_.indexOf(component);\n            createdComponents_.splice(componentIndex, 1);\n            var upgrades = component.element_.getAttribute(\"data-upgraded\").split(\",\");\n            var componentPlace = upgrades.indexOf(component[componentConfigProperty_].classAsString);\n            upgrades.splice(componentPlace, 1);\n            component.element_.setAttribute(\"data-upgraded\", upgrades.join(\",\"));\n            var ev = createEvent_(\"mdl-componentdowngraded\", true, false);\n            component.element_.dispatchEvent(ev);\n        }\n    }\n    /**\n   * Downgrade either a given node, an array of nodes, or a NodeList.\n   *\n   * @param {!Node|!Array<!Node>|!NodeList} nodes\n   */ function downgradeNodesInternal(nodes) {\n        /**\n     * Auxiliary function to downgrade a single node.\n     * @param  {!Node} node the node to be downgraded\n     */ var downgradeNode = function(node) {\n            createdComponents_.filter(function(item) {\n                return item.element_ === node;\n            }).forEach(deconstructComponentInternal);\n        };\n        if (nodes instanceof Array || nodes instanceof NodeList) {\n            for(var n = 0; n < nodes.length; n++){\n                downgradeNode(nodes[n]);\n            }\n        } else if (nodes instanceof Node) {\n            downgradeNode(nodes);\n        } else {\n            throw new Error(\"Invalid argument provided to downgrade MDL nodes.\");\n        }\n    }\n    // Now return the functions that should be made public with their publicly\n    // facing names...\n    return {\n        upgradeDom: upgradeDomInternal,\n        upgradeElement: upgradeElementInternal,\n        upgradeElements: upgradeElementsInternal,\n        upgradeAllRegistered: upgradeAllRegisteredInternal,\n        registerUpgradedCallback: registerUpgradedCallbackInternal,\n        register: registerInternal,\n        downgradeElements: downgradeNodesInternal\n    };\n}();\n/**\n * Describes the type of a registered component type managed by\n * componentHandler. Provided for benefit of the Closure compiler.\n *\n * @typedef {{\n *   constructor: Function,\n *   classAsString: string,\n *   cssClass: string,\n *   widget: (string|boolean|undefined)\n * }}\n */ componentHandler.ComponentConfigPublic; // jshint ignore:line\n/**\n * Describes the type of a registered component type managed by\n * componentHandler. Provided for benefit of the Closure compiler.\n *\n * @typedef {{\n *   constructor: !Function,\n *   className: string,\n *   cssClass: string,\n *   widget: (string|boolean),\n *   callbacks: !Array<function(!HTMLElement)>\n * }}\n */ componentHandler.ComponentConfig; // jshint ignore:line\n/**\n * Created component (i.e., upgraded element) type as managed by\n * componentHandler. Provided for benefit of the Closure compiler.\n *\n * @typedef {{\n *   element_: !HTMLElement,\n *   className: string,\n *   classAsString: string,\n *   cssClass: string,\n *   widget: string\n * }}\n */ componentHandler.Component; // jshint ignore:line\n// Export all symbols, for the benefit of Closure compiler.\n// No effect on uncompiled code.\ncomponentHandler[\"upgradeDom\"] = componentHandler.upgradeDom;\ncomponentHandler[\"upgradeElement\"] = componentHandler.upgradeElement;\ncomponentHandler[\"upgradeElements\"] = componentHandler.upgradeElements;\ncomponentHandler[\"upgradeAllRegistered\"] = componentHandler.upgradeAllRegistered;\ncomponentHandler[\"registerUpgradedCallback\"] = componentHandler.registerUpgradedCallback;\ncomponentHandler[\"register\"] = componentHandler.register;\ncomponentHandler[\"downgradeElements\"] = componentHandler.downgradeElements;\nwindow.componentHandler = componentHandler;\nwindow[\"componentHandler\"] = componentHandler;\nwindow.addEventListener(\"load\", function() {\n    \"use strict\";\n    /**\n   * Performs a \"Cutting the mustard\" test. If the browser supports the features\n   * tested, adds a mdl-js class to the <html> element. It then upgrades all MDL\n   * components requiring JavaScript.\n   */ if (\"classList\" in document.createElement(\"div\") && \"querySelector\" in document && \"addEventListener\" in window && Array.prototype.forEach) {\n        document.documentElement.classList.add(\"mdl-js\");\n        componentHandler.upgradeAllRegistered();\n    } else {\n        /**\n     * Dummy function to avoid JS errors.\n     */ componentHandler.upgradeElement = function() {};\n        /**\n     * Dummy function to avoid JS errors.\n     */ componentHandler.register = function() {};\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/material-design-lite/src/mdlComponentHandler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/material-design-lite/src/progress/progress.js":
/*!********************************************************************!*\
  !*** ./node_modules/material-design-lite/src/progress/progress.js ***!
  \********************************************************************/
/***/ (() => {

eval("/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ (function() {\n    \"use strict\";\n    /**\n   * Class constructor for Progress MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */ var MaterialProgress = function MaterialProgress(element) {\n        this.element_ = element;\n        // Initialize instance.\n        this.init();\n    };\n    window[\"MaterialProgress\"] = MaterialProgress;\n    /**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */ MaterialProgress.prototype.Constant_ = {};\n    /**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */ MaterialProgress.prototype.CssClasses_ = {\n        INDETERMINATE_CLASS: \"mdl-progress__indeterminate\"\n    };\n    /**\n   * Set the current progress of the progressbar.\n   *\n   * @param {number} p Percentage of the progress (0-100)\n   * @public\n   */ MaterialProgress.prototype.setProgress = function(p) {\n        if (this.element_.classList.contains(this.CssClasses_.INDETERMINATE_CLASS)) {\n            return;\n        }\n        this.progressbar_.style.width = p + \"%\";\n    };\n    MaterialProgress.prototype[\"setProgress\"] = MaterialProgress.prototype.setProgress;\n    /**\n   * Set the current progress of the buffer.\n   *\n   * @param {number} p Percentage of the buffer (0-100)\n   * @public\n   */ MaterialProgress.prototype.setBuffer = function(p) {\n        this.bufferbar_.style.width = p + \"%\";\n        this.auxbar_.style.width = 100 - p + \"%\";\n    };\n    MaterialProgress.prototype[\"setBuffer\"] = MaterialProgress.prototype.setBuffer;\n    /**\n   * Initialize element.\n   */ MaterialProgress.prototype.init = function() {\n        if (this.element_) {\n            var el = document.createElement(\"div\");\n            el.className = \"progressbar bar bar1\";\n            this.element_.appendChild(el);\n            this.progressbar_ = el;\n            el = document.createElement(\"div\");\n            el.className = \"bufferbar bar bar2\";\n            this.element_.appendChild(el);\n            this.bufferbar_ = el;\n            el = document.createElement(\"div\");\n            el.className = \"auxbar bar bar3\";\n            this.element_.appendChild(el);\n            this.auxbar_ = el;\n            this.progressbar_.style.width = \"0%\";\n            this.bufferbar_.style.width = \"100%\";\n            this.auxbar_.style.width = \"0%\";\n            this.element_.classList.add(\"is-upgraded\");\n        }\n    };\n    // The component registers itself. It can assume componentHandler is available\n    // in the global scope.\n    componentHandler.register({\n        constructor: MaterialProgress,\n        classAsString: \"MaterialProgress\",\n        cssClass: \"mdl-js-progress\",\n        widget: true\n    });\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtZGVzaWduLWxpdGUvc3JjL3Byb2dyZXNzL3Byb2dyZXNzLmpzPzIyNWMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBDbGFzcyBjb25zdHJ1Y3RvciBmb3IgUHJvZ3Jlc3MgTURMIGNvbXBvbmVudC5cbiAgICogSW1wbGVtZW50cyBNREwgY29tcG9uZW50IGRlc2lnbiBwYXR0ZXJuIGRlZmluZWQgYXQ6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXNvbm1heWVzL21kbC1jb21wb25lbnQtZGVzaWduLXBhdHRlcm5cbiAgICpcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdGhhdCB3aWxsIGJlIHVwZ3JhZGVkLlxuICAgKi9cbiAgdmFyIE1hdGVyaWFsUHJvZ3Jlc3MgPSBmdW5jdGlvbiBNYXRlcmlhbFByb2dyZXNzKGVsZW1lbnQpIHtcbiAgICB0aGlzLmVsZW1lbnRfID0gZWxlbWVudDtcblxuICAgIC8vIEluaXRpYWxpemUgaW5zdGFuY2UuXG4gICAgdGhpcy5pbml0KCk7XG4gIH07XG4gIHdpbmRvd1snTWF0ZXJpYWxQcm9ncmVzcyddID0gTWF0ZXJpYWxQcm9ncmVzcztcblxuICAvKipcbiAgICogU3RvcmUgY29uc3RhbnRzIGluIG9uZSBwbGFjZSBzbyB0aGV5IGNhbiBiZSB1cGRhdGVkIGVhc2lseS5cbiAgICpcbiAgICogQGVudW0ge3N0cmluZyB8IG51bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIE1hdGVyaWFsUHJvZ3Jlc3MucHJvdG90eXBlLkNvbnN0YW50XyA9IHtcbiAgfTtcblxuICAvKipcbiAgICogU3RvcmUgc3RyaW5ncyBmb3IgY2xhc3MgbmFtZXMgZGVmaW5lZCBieSB0aGlzIGNvbXBvbmVudCB0aGF0IGFyZSB1c2VkIGluXG4gICAqIEphdmFTY3JpcHQuIFRoaXMgYWxsb3dzIHVzIHRvIHNpbXBseSBjaGFuZ2UgaXQgaW4gb25lIHBsYWNlIHNob3VsZCB3ZVxuICAgKiBkZWNpZGUgdG8gbW9kaWZ5IGF0IGEgbGF0ZXIgZGF0ZS5cbiAgICpcbiAgICogQGVudW0ge3N0cmluZ31cbiAgICogQHByaXZhdGVcbiAgICovXG4gIE1hdGVyaWFsUHJvZ3Jlc3MucHJvdG90eXBlLkNzc0NsYXNzZXNfID0ge1xuICAgIElOREVURVJNSU5BVEVfQ0xBU1M6ICdtZGwtcHJvZ3Jlc3NfX2luZGV0ZXJtaW5hdGUnXG4gIH07XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgY3VycmVudCBwcm9ncmVzcyBvZiB0aGUgcHJvZ3Jlc3NiYXIuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwIFBlcmNlbnRhZ2Ugb2YgdGhlIHByb2dyZXNzICgwLTEwMClcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgTWF0ZXJpYWxQcm9ncmVzcy5wcm90b3R5cGUuc2V0UHJvZ3Jlc3MgPSBmdW5jdGlvbihwKSB7XG4gICAgaWYgKHRoaXMuZWxlbWVudF8uY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMuQ3NzQ2xhc3Nlc18uSU5ERVRFUk1JTkFURV9DTEFTUykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnByb2dyZXNzYmFyXy5zdHlsZS53aWR0aCA9IHAgKyAnJSc7XG4gIH07XG4gIE1hdGVyaWFsUHJvZ3Jlc3MucHJvdG90eXBlWydzZXRQcm9ncmVzcyddID1cbiAgICAgIE1hdGVyaWFsUHJvZ3Jlc3MucHJvdG90eXBlLnNldFByb2dyZXNzO1xuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGN1cnJlbnQgcHJvZ3Jlc3Mgb2YgdGhlIGJ1ZmZlci5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHAgUGVyY2VudGFnZSBvZiB0aGUgYnVmZmVyICgwLTEwMClcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgTWF0ZXJpYWxQcm9ncmVzcy5wcm90b3R5cGUuc2V0QnVmZmVyID0gZnVuY3Rpb24ocCkge1xuICAgIHRoaXMuYnVmZmVyYmFyXy5zdHlsZS53aWR0aCA9IHAgKyAnJSc7XG4gICAgdGhpcy5hdXhiYXJfLnN0eWxlLndpZHRoID0gKDEwMCAtIHApICsgJyUnO1xuICB9O1xuICBNYXRlcmlhbFByb2dyZXNzLnByb3RvdHlwZVsnc2V0QnVmZmVyJ10gPVxuICAgICAgTWF0ZXJpYWxQcm9ncmVzcy5wcm90b3R5cGUuc2V0QnVmZmVyO1xuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIGVsZW1lbnQuXG4gICAqL1xuICBNYXRlcmlhbFByb2dyZXNzLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuZWxlbWVudF8pIHtcbiAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgZWwuY2xhc3NOYW1lID0gJ3Byb2dyZXNzYmFyIGJhciBiYXIxJztcbiAgICAgIHRoaXMuZWxlbWVudF8uYXBwZW5kQ2hpbGQoZWwpO1xuICAgICAgdGhpcy5wcm9ncmVzc2Jhcl8gPSBlbDtcblxuICAgICAgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGVsLmNsYXNzTmFtZSA9ICdidWZmZXJiYXIgYmFyIGJhcjInO1xuICAgICAgdGhpcy5lbGVtZW50Xy5hcHBlbmRDaGlsZChlbCk7XG4gICAgICB0aGlzLmJ1ZmZlcmJhcl8gPSBlbDtcblxuICAgICAgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGVsLmNsYXNzTmFtZSA9ICdhdXhiYXIgYmFyIGJhcjMnO1xuICAgICAgdGhpcy5lbGVtZW50Xy5hcHBlbmRDaGlsZChlbCk7XG4gICAgICB0aGlzLmF1eGJhcl8gPSBlbDtcblxuICAgICAgdGhpcy5wcm9ncmVzc2Jhcl8uc3R5bGUud2lkdGggPSAnMCUnO1xuICAgICAgdGhpcy5idWZmZXJiYXJfLnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgdGhpcy5hdXhiYXJfLnN0eWxlLndpZHRoID0gJzAlJztcblxuICAgICAgdGhpcy5lbGVtZW50Xy5jbGFzc0xpc3QuYWRkKCdpcy11cGdyYWRlZCcpO1xuICAgIH1cbiAgfTtcblxuICAvLyBUaGUgY29tcG9uZW50IHJlZ2lzdGVycyBpdHNlbGYuIEl0IGNhbiBhc3N1bWUgY29tcG9uZW50SGFuZGxlciBpcyBhdmFpbGFibGVcbiAgLy8gaW4gdGhlIGdsb2JhbCBzY29wZS5cbiAgY29tcG9uZW50SGFuZGxlci5yZWdpc3Rlcih7XG4gICAgY29uc3RydWN0b3I6IE1hdGVyaWFsUHJvZ3Jlc3MsXG4gICAgY2xhc3NBc1N0cmluZzogJ01hdGVyaWFsUHJvZ3Jlc3MnLFxuICAgIGNzc0NsYXNzOiAnbWRsLWpzLXByb2dyZXNzJyxcbiAgICB3aWRnZXQ6IHRydWVcbiAgfSk7XG59KSgpO1xuIl0sIm5hbWVzIjpbIk1hdGVyaWFsUHJvZ3Jlc3MiLCJlbGVtZW50IiwiZWxlbWVudF8iLCJpbml0Iiwid2luZG93IiwicHJvdG90eXBlIiwiQ29uc3RhbnRfIiwiQ3NzQ2xhc3Nlc18iLCJJTkRFVEVSTUlOQVRFX0NMQVNTIiwic2V0UHJvZ3Jlc3MiLCJwIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJwcm9ncmVzc2Jhcl8iLCJzdHlsZSIsIndpZHRoIiwic2V0QnVmZmVyIiwiYnVmZmVyYmFyXyIsImF1eGJhcl8iLCJlbCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImFwcGVuZENoaWxkIiwiYWRkIiwiY29tcG9uZW50SGFuZGxlciIsInJlZ2lzdGVyIiwiY29uc3RydWN0b3IiLCJjbGFzc0FzU3RyaW5nIiwiY3NzQ2xhc3MiLCJ3aWRnZXQiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Q0FlQyxHQUVBLENBQUE7SUFDQztJQUVBOzs7Ozs7O0dBT0MsR0FDRCxJQUFJQSxtQkFBbUIsU0FBU0EsaUJBQWlCQyxPQUFPO1FBQ3RELElBQUksQ0FBQ0MsUUFBUSxHQUFHRDtRQUVoQix1QkFBdUI7UUFDdkIsSUFBSSxDQUFDRSxJQUFJO0lBQ1g7SUFDQUMsTUFBTSxDQUFDLG1CQUFtQixHQUFHSjtJQUU3Qjs7Ozs7R0FLQyxHQUNEQSxpQkFBaUJLLFNBQVMsQ0FBQ0MsU0FBUyxHQUFHLENBQ3ZDO0lBRUE7Ozs7Ozs7R0FPQyxHQUNETixpQkFBaUJLLFNBQVMsQ0FBQ0UsV0FBVyxHQUFHO1FBQ3ZDQyxxQkFBcUI7SUFDdkI7SUFFQTs7Ozs7R0FLQyxHQUNEUixpQkFBaUJLLFNBQVMsQ0FBQ0ksV0FBVyxHQUFHLFNBQVNDLENBQUM7UUFDakQsSUFBSSxJQUFJLENBQUNSLFFBQVEsQ0FBQ1MsU0FBUyxDQUFDQyxRQUFRLENBQUMsSUFBSSxDQUFDTCxXQUFXLENBQUNDLG1CQUFtQixHQUFHO1lBQzFFO1FBQ0Y7UUFFQSxJQUFJLENBQUNLLFlBQVksQ0FBQ0MsS0FBSyxDQUFDQyxLQUFLLEdBQUdMLElBQUk7SUFDdEM7SUFDQVYsaUJBQWlCSyxTQUFTLENBQUMsY0FBYyxHQUNyQ0wsaUJBQWlCSyxTQUFTLENBQUNJLFdBQVc7SUFFMUM7Ozs7O0dBS0MsR0FDRFQsaUJBQWlCSyxTQUFTLENBQUNXLFNBQVMsR0FBRyxTQUFTTixDQUFDO1FBQy9DLElBQUksQ0FBQ08sVUFBVSxDQUFDSCxLQUFLLENBQUNDLEtBQUssR0FBR0wsSUFBSTtRQUNsQyxJQUFJLENBQUNRLE9BQU8sQ0FBQ0osS0FBSyxDQUFDQyxLQUFLLEdBQUcsQUFBQyxNQUFNTCxJQUFLO0lBQ3pDO0lBQ0FWLGlCQUFpQkssU0FBUyxDQUFDLFlBQVksR0FDbkNMLGlCQUFpQkssU0FBUyxDQUFDVyxTQUFTO0lBRXhDOztHQUVDLEdBQ0RoQixpQkFBaUJLLFNBQVMsQ0FBQ0YsSUFBSSxHQUFHO1FBQ2hDLElBQUksSUFBSSxDQUFDRCxRQUFRLEVBQUU7WUFDakIsSUFBSWlCLEtBQUtDLFNBQVNDLGFBQWEsQ0FBQztZQUNoQ0YsR0FBR0csU0FBUyxHQUFHO1lBQ2YsSUFBSSxDQUFDcEIsUUFBUSxDQUFDcUIsV0FBVyxDQUFDSjtZQUMxQixJQUFJLENBQUNOLFlBQVksR0FBR007WUFFcEJBLEtBQUtDLFNBQVNDLGFBQWEsQ0FBQztZQUM1QkYsR0FBR0csU0FBUyxHQUFHO1lBQ2YsSUFBSSxDQUFDcEIsUUFBUSxDQUFDcUIsV0FBVyxDQUFDSjtZQUMxQixJQUFJLENBQUNGLFVBQVUsR0FBR0U7WUFFbEJBLEtBQUtDLFNBQVNDLGFBQWEsQ0FBQztZQUM1QkYsR0FBR0csU0FBUyxHQUFHO1lBQ2YsSUFBSSxDQUFDcEIsUUFBUSxDQUFDcUIsV0FBVyxDQUFDSjtZQUMxQixJQUFJLENBQUNELE9BQU8sR0FBR0M7WUFFZixJQUFJLENBQUNOLFlBQVksQ0FBQ0MsS0FBSyxDQUFDQyxLQUFLLEdBQUc7WUFDaEMsSUFBSSxDQUFDRSxVQUFVLENBQUNILEtBQUssQ0FBQ0MsS0FBSyxHQUFHO1lBQzlCLElBQUksQ0FBQ0csT0FBTyxDQUFDSixLQUFLLENBQUNDLEtBQUssR0FBRztZQUUzQixJQUFJLENBQUNiLFFBQVEsQ0FBQ1MsU0FBUyxDQUFDYSxHQUFHLENBQUM7UUFDOUI7SUFDRjtJQUVBLDhFQUE4RTtJQUM5RSx1QkFBdUI7SUFDdkJDLGlCQUFpQkMsUUFBUSxDQUFDO1FBQ3hCQyxhQUFhM0I7UUFDYjRCLGVBQWU7UUFDZkMsVUFBVTtRQUNWQyxRQUFRO0lBQ1Y7QUFDRixDQUFBIiwiZmlsZSI6Iihzc3IpLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLWRlc2lnbi1saXRlL3NyYy9wcm9ncmVzcy9wcm9ncmVzcy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/material-design-lite/src/progress/progress.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/material-design-lite/src/spinner/spinner.js":
/*!******************************************************************!*\
  !*** ./node_modules/material-design-lite/src/spinner/spinner.js ***!
  \******************************************************************/
/***/ (() => {

eval("/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ (function() {\n    \"use strict\";\n    /**\n   * Class constructor for Spinner MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   * @constructor\n   */ var MaterialSpinner = function MaterialSpinner(element) {\n        this.element_ = element;\n        // Initialize instance.\n        this.init();\n    };\n    window[\"MaterialSpinner\"] = MaterialSpinner;\n    /**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */ MaterialSpinner.prototype.Constant_ = {\n        MDL_SPINNER_LAYER_COUNT: 4\n    };\n    /**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */ MaterialSpinner.prototype.CssClasses_ = {\n        MDL_SPINNER_LAYER: \"mdl-spinner__layer\",\n        MDL_SPINNER_CIRCLE_CLIPPER: \"mdl-spinner__circle-clipper\",\n        MDL_SPINNER_CIRCLE: \"mdl-spinner__circle\",\n        MDL_SPINNER_GAP_PATCH: \"mdl-spinner__gap-patch\",\n        MDL_SPINNER_LEFT: \"mdl-spinner__left\",\n        MDL_SPINNER_RIGHT: \"mdl-spinner__right\"\n    };\n    /**\n   * Auxiliary method to create a spinner layer.\n   *\n   * @param {number} index Index of the layer to be created.\n   * @public\n   */ MaterialSpinner.prototype.createLayer = function(index) {\n        var layer = document.createElement(\"div\");\n        layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER);\n        layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER + \"-\" + index);\n        var leftClipper = document.createElement(\"div\");\n        leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);\n        leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_LEFT);\n        var gapPatch = document.createElement(\"div\");\n        gapPatch.classList.add(this.CssClasses_.MDL_SPINNER_GAP_PATCH);\n        var rightClipper = document.createElement(\"div\");\n        rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);\n        rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_RIGHT);\n        var circleOwners = [\n            leftClipper,\n            gapPatch,\n            rightClipper\n        ];\n        for(var i = 0; i < circleOwners.length; i++){\n            var circle = document.createElement(\"div\");\n            circle.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE);\n            circleOwners[i].appendChild(circle);\n        }\n        layer.appendChild(leftClipper);\n        layer.appendChild(gapPatch);\n        layer.appendChild(rightClipper);\n        this.element_.appendChild(layer);\n    };\n    MaterialSpinner.prototype[\"createLayer\"] = MaterialSpinner.prototype.createLayer;\n    /**\n   * Stops the spinner animation.\n   * Public method for users who need to stop the spinner for any reason.\n   *\n   * @public\n   */ MaterialSpinner.prototype.stop = function() {\n        this.element_.classList.remove(\"is-active\");\n    };\n    MaterialSpinner.prototype[\"stop\"] = MaterialSpinner.prototype.stop;\n    /**\n   * Starts the spinner animation.\n   * Public method for users who need to manually start the spinner for any reason\n   * (instead of just adding the 'is-active' class to their markup).\n   *\n   * @public\n   */ MaterialSpinner.prototype.start = function() {\n        this.element_.classList.add(\"is-active\");\n    };\n    MaterialSpinner.prototype[\"start\"] = MaterialSpinner.prototype.start;\n    /**\n   * Initialize element.\n   */ MaterialSpinner.prototype.init = function() {\n        if (this.element_) {\n            for(var i = 1; i <= this.Constant_.MDL_SPINNER_LAYER_COUNT; i++){\n                this.createLayer(i);\n            }\n            this.element_.classList.add(\"is-upgraded\");\n        }\n    };\n    // The component registers itself. It can assume componentHandler is available\n    // in the global scope.\n    componentHandler.register({\n        constructor: MaterialSpinner,\n        classAsString: \"MaterialSpinner\",\n        cssClass: \"mdl-js-spinner\",\n        widget: true\n    });\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/material-design-lite/src/spinner/spinner.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/material-design-lite/src/textfield/textfield.js":
/*!**********************************************************************!*\
  !*** ./node_modules/material-design-lite/src/textfield/textfield.js ***!
  \**********************************************************************/
/***/ (() => {

eval("/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ (function() {\n    \"use strict\";\n    /**\n   * Class constructor for Textfield MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */ var MaterialTextfield = function MaterialTextfield(element) {\n        this.element_ = element;\n        this.maxRows = this.Constant_.NO_MAX_ROWS;\n        // Initialize instance.\n        this.init();\n    };\n    window[\"MaterialTextfield\"] = MaterialTextfield;\n    /**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */ MaterialTextfield.prototype.Constant_ = {\n        NO_MAX_ROWS: -1,\n        MAX_ROWS_ATTRIBUTE: \"maxrows\"\n    };\n    /**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */ MaterialTextfield.prototype.CssClasses_ = {\n        LABEL: \"mdl-textfield__label\",\n        INPUT: \"mdl-textfield__input\",\n        IS_DIRTY: \"is-dirty\",\n        IS_FOCUSED: \"is-focused\",\n        IS_DISABLED: \"is-disabled\",\n        IS_INVALID: \"is-invalid\",\n        IS_UPGRADED: \"is-upgraded\",\n        HAS_PLACEHOLDER: \"has-placeholder\"\n    };\n    /**\n   * Handle input being entered.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */ MaterialTextfield.prototype.onKeyDown_ = function(event) {\n        var currentRowCount = event.target.value.split(\"\\n\").length;\n        if (event.keyCode === 13) {\n            if (currentRowCount >= this.maxRows) {\n                event.preventDefault();\n            }\n        }\n    };\n    /**\n   * Handle focus.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */ MaterialTextfield.prototype.onFocus_ = function(event) {\n        this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n    };\n    /**\n   * Handle lost focus.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */ MaterialTextfield.prototype.onBlur_ = function(event) {\n        this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n    };\n    /**\n   * Handle reset event from out side.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */ MaterialTextfield.prototype.onReset_ = function(event) {\n        this.updateClasses_();\n    };\n    /**\n   * Handle class updates.\n   *\n   * @private\n   */ MaterialTextfield.prototype.updateClasses_ = function() {\n        this.checkDisabled();\n        this.checkValidity();\n        this.checkDirty();\n        this.checkFocus();\n    };\n    // Public methods.\n    /**\n   * Check the disabled state and update field accordingly.\n   *\n   * @public\n   */ MaterialTextfield.prototype.checkDisabled = function() {\n        if (this.input_.disabled) {\n            this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n        } else {\n            this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n        }\n    };\n    MaterialTextfield.prototype[\"checkDisabled\"] = MaterialTextfield.prototype.checkDisabled;\n    /**\n  * Check the focus state and update field accordingly.\n  *\n  * @public\n  */ MaterialTextfield.prototype.checkFocus = function() {\n        if (Boolean(this.element_.querySelector(\":focus\"))) {\n            this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n        } else {\n            this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n        }\n    };\n    MaterialTextfield.prototype[\"checkFocus\"] = MaterialTextfield.prototype.checkFocus;\n    /**\n   * Check the validity state and update field accordingly.\n   *\n   * @public\n   */ MaterialTextfield.prototype.checkValidity = function() {\n        if (this.input_.validity) {\n            if (this.input_.validity.valid) {\n                this.element_.classList.remove(this.CssClasses_.IS_INVALID);\n            } else {\n                this.element_.classList.add(this.CssClasses_.IS_INVALID);\n            }\n        }\n    };\n    MaterialTextfield.prototype[\"checkValidity\"] = MaterialTextfield.prototype.checkValidity;\n    /**\n   * Check the dirty state and update field accordingly.\n   *\n   * @public\n   */ MaterialTextfield.prototype.checkDirty = function() {\n        if (this.input_.value && this.input_.value.length > 0) {\n            this.element_.classList.add(this.CssClasses_.IS_DIRTY);\n        } else {\n            this.element_.classList.remove(this.CssClasses_.IS_DIRTY);\n        }\n    };\n    MaterialTextfield.prototype[\"checkDirty\"] = MaterialTextfield.prototype.checkDirty;\n    /**\n   * Disable text field.\n   *\n   * @public\n   */ MaterialTextfield.prototype.disable = function() {\n        this.input_.disabled = true;\n        this.updateClasses_();\n    };\n    MaterialTextfield.prototype[\"disable\"] = MaterialTextfield.prototype.disable;\n    /**\n   * Enable text field.\n   *\n   * @public\n   */ MaterialTextfield.prototype.enable = function() {\n        this.input_.disabled = false;\n        this.updateClasses_();\n    };\n    MaterialTextfield.prototype[\"enable\"] = MaterialTextfield.prototype.enable;\n    /**\n   * Update text field value.\n   *\n   * @param {string} value The value to which to set the control (optional).\n   * @public\n   */ MaterialTextfield.prototype.change = function(value) {\n        this.input_.value = value || \"\";\n        this.updateClasses_();\n    };\n    MaterialTextfield.prototype[\"change\"] = MaterialTextfield.prototype.change;\n    /**\n   * Initialize element.\n   */ MaterialTextfield.prototype.init = function() {\n        if (this.element_) {\n            this.label_ = this.element_.querySelector(\".\" + this.CssClasses_.LABEL);\n            this.input_ = this.element_.querySelector(\".\" + this.CssClasses_.INPUT);\n            if (this.input_) {\n                if (this.input_.hasAttribute(/** @type {string} */ this.Constant_.MAX_ROWS_ATTRIBUTE)) {\n                    this.maxRows = parseInt(this.input_.getAttribute(/** @type {string} */ this.Constant_.MAX_ROWS_ATTRIBUTE), 10);\n                    if (isNaN(this.maxRows)) {\n                        this.maxRows = this.Constant_.NO_MAX_ROWS;\n                    }\n                }\n                if (this.input_.hasAttribute(\"placeholder\")) {\n                    this.element_.classList.add(this.CssClasses_.HAS_PLACEHOLDER);\n                }\n                this.boundUpdateClassesHandler = this.updateClasses_.bind(this);\n                this.boundFocusHandler = this.onFocus_.bind(this);\n                this.boundBlurHandler = this.onBlur_.bind(this);\n                this.boundResetHandler = this.onReset_.bind(this);\n                this.input_.addEventListener(\"input\", this.boundUpdateClassesHandler);\n                this.input_.addEventListener(\"focus\", this.boundFocusHandler);\n                this.input_.addEventListener(\"blur\", this.boundBlurHandler);\n                this.input_.addEventListener(\"reset\", this.boundResetHandler);\n                if (this.maxRows !== this.Constant_.NO_MAX_ROWS) {\n                    // TODO: This should handle pasting multi line text.\n                    // Currently doesn't.\n                    this.boundKeyDownHandler = this.onKeyDown_.bind(this);\n                    this.input_.addEventListener(\"keydown\", this.boundKeyDownHandler);\n                }\n                var invalid = this.element_.classList.contains(this.CssClasses_.IS_INVALID);\n                this.updateClasses_();\n                this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n                if (invalid) {\n                    this.element_.classList.add(this.CssClasses_.IS_INVALID);\n                }\n                if (this.input_.hasAttribute(\"autofocus\")) {\n                    this.element_.focus();\n                    this.checkFocus();\n                }\n            }\n        }\n    };\n    // The component registers itself. It can assume componentHandler is available\n    // in the global scope.\n    componentHandler.register({\n        constructor: MaterialTextfield,\n        classAsString: \"MaterialTextfield\",\n        cssClass: \"mdl-js-textfield\",\n        widget: true\n    });\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/material-design-lite/src/textfield/textfield.js\n");

/***/ })

};
;